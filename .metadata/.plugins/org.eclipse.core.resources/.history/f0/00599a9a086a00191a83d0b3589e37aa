import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class CalendarFrame extends JFrame
{
	public static final int WIDTH = 1000;
	public static final int HEIGHT = 700;
	
	CalendarModel dataModel;
	CalendarPanel calUI;
	
	EventsPanel eventUI;
	
	String[] months = {"Jan", "Feb", "March", "April", "May", "June", "July", "Aug", "Sep", "Oct",
			"Nov", "Dec"};
	String[] dayOfWeek = {"S", "M", "T","W", "T", "F", "S"};
	
	
	public CalendarFrame()
	{
		dataModel = new CalendarModel();
		setSize(WIDTH,HEIGHT);
		setLayout(new BorderLayout());
		
		//the top bar
		JPanel top = new JPanel();
		top.setLayout(new FlowLayout(0,175,0));
		//need to add functionality to the buttons
		JButton createEventButton = new JButton("Create");
		createEventButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				JFrame frame = new createEventFrame();
				frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				frame.setVisible(true);
			}
			
		});
		
		top.add(createEventButton);		
		
		JPanel monthScroll = new JPanel();
		monthScroll.add(Box.createRigidArea(new Dimension(16, 0)));
		
		JButton leftScroll = new JButton("<");
		leftScroll.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				dataModel.addDays(-1);
			}
			
		});
		
		JButton rightScroll = new JButton(">");
		rightScroll.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				dataModel.addDays(1);
			}
			
		});
		
		monthScroll.add(leftScroll);
		monthScroll.add(rightScroll);
		
		
		top.add(monthScroll);
		top.add(new JButton("Quit"));
		add(top, BorderLayout.NORTH);
		
		//the middle
		JPanel ui = new JPanel();
		ui.setLayout(new FlowLayout());
		
		//the left calendar portion
		calUI = new CalendarPanel();
		ui.add(calUI);
		
		//the right event portion
		eventUI = new EventsPanel();
		ui.add(eventUI);
		
		add(ui, BorderLayout.CENTER);
		
		ChangeListener listener = new ChangeListener()
		{
			@Override
			public void stateChanged(ChangeEvent event) {
				ui.remove(calUI);
				calUI = new CalendarPanel();
				ui.add(calUI,BorderLayout.CENTER);
				
				ui.remove(eventUI);
				eventUI = new EventsPanel();
				ui.add(eventUI,BorderLayout.CENTER);
				
				ui.validate();
				ui.repaint();
			}
			
		};
		
		dataModel.attach(listener);
		
	}
	
	
	class createEventFrame extends JFrame
	{
		public static final int EWIDTH = 500;
		public static final int EHEIGHT = 90;
		
		public createEventFrame()
		{
			setSize(EWIDTH,EHEIGHT);
			setLayout(new BorderLayout());
			
			JTextArea nameField = new JTextArea();
			nameField.setText("Untitled Event");
			Border textboarder = BorderFactory.createLineBorder(Color.BLACK);
			nameField.setBorder(textboarder);
			add(nameField, BorderLayout.NORTH);
			
			JPanel infoFields = new JPanel();
			infoFields.setLayout(new FlowLayout());
			
			JTextArea date = new JTextArea(1,7);
			DateFormat format = new SimpleDateFormat("MM/dd/yyyy");
			date.setText(format.format(dataModel.getGCalendar().getTime()));
			date.setBorder(textboarder);
			
			
			JTextArea eventStart = new JTextArea(1,10);
			eventStart.setText("24:00");
			eventStart.setBorder(textboarder);
			JTextArea word = new JTextArea(1,3);
			word.setText("to");
			JTextArea eventEnd = new JTextArea(1,10);
			eventEnd.setText("24:00");
			eventEnd.setBorder(textboarder);
			JButton saveButton = new JButton("Save");
			saveButton.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {
					createEventFrame.this.dispose();
				}
				
			});
			
			infoFields.add(date);
			infoFields.add(eventStart);
			infoFields.add(word);
			infoFields.add(eventEnd);
			infoFields.add(saveButton);
			
			add(infoFields, BorderLayout.SOUTH);
		}
	}
	
	class EventsPanel extends JPanel
	{
		public EventsPanel()
		{
			JTextArea eventText = new JTextArea(20, 30);
			ArrayList<Event> list = new ArrayList<>();
			if(list == null)
			{
				eventText.setText("No events have been scheduled");
			}
			else
			{
				for(Event e :list)
				{
					eventText.append(e.getName());
				}
			}
			add(eventText);
		}
	}
	
	
	class CalendarPanel extends JPanel
	{	
		private String monthInfo;
		
		public CalendarPanel()
		{
			setLayout(new BorderLayout());
			String monthInfo = months[CalendarFrame.this.dataModel.getGCalendar().get(Calendar.MONTH)] + " " + 
					CalendarFrame.this.dataModel.getGCalendar().get(Calendar.YEAR);
			JTextArea title = new JTextArea();
			title.setText(monthInfo);;
			add(title, BorderLayout.NORTH);
			
			JPanel buttonArray = new JPanel();
		
			buttonArray.setLayout(new GridLayout(0,7,4,4));
			for(int i = 0; i < 7; i++)
			{
				JButton dayOfW = new JButton(dayOfWeek[i]);
				dayOfW.setPreferredSize(new Dimension(50,50));
				buttonArray.add(dayOfW);
			}
			
			System.out.println("Frame: " +dataModel.getGCalendar().getTime());
			
			Date today = CalendarFrame.this.dataModel.getGCalendar().getTime();
			CalendarFrame.this.dataModel.getGCalendar().set(Calendar.DAY_OF_MONTH, 1);
			int day = CalendarFrame.this.dataModel.getGCalendar().get(Calendar.DAY_OF_WEEK)-1;
			CalendarFrame.this.dataModel.getGCalendar().setTime(today);
			
			System.out.println("Frame: " +dataModel.getGCalendar().getTime());
			
			for(int i = 0; i < day; i++)
			{
				JButton dayOfW = new JButton(" ");
				dayOfW.setPreferredSize(new Dimension(50,50));
				dayOfW.setBackground(Color.WHITE);
				dayOfW.setForeground(Color.GRAY);
				buttonArray.add(dayOfW);
			}
			
			for(int i = 1; i <= CalendarFrame.this.dataModel.getGCalendar().getActualMaximum(Calendar.DAY_OF_MONTH); i++)
			{
				final int set = i;
				JButton dayOfW = new JButton(i+"");
				dayOfW.setPreferredSize(new Dimension(50,50));
				if(i == CalendarFrame.this.dataModel.getGCalendar().get(Calendar.DAY_OF_MONTH))
				{
					dayOfW.setBackground(Color.GRAY);
					dayOfW.setForeground(Color.WHITE);
				}
				else
				{
					dayOfW.setBackground(Color.WHITE);
					dayOfW.setForeground(Color.BLACK);
				}
				dayOfW.addActionListener(new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent e) {
						CalendarFrame.this.dataModel.setCalendarDayOfMonth(set);
					}
				});
				buttonArray.add(dayOfW);
			}
			
			add(buttonArray,BorderLayout.CENTER);
		
		
		}
	}
} 


